// Generated by CoffeeScript 2.5.0
(function() {
  var HalfPI, Simulator, Tau, TauDiv360, Worm, polarToCart, toRadians;

  HalfPI = Math.PI / 2;

  Tau = Math.PI * 2;

  TauDiv360 = Tau / 360;

  polarToCart = function(r, theta) {
    return [r * Math.cos(theta), r * Math.sin(theta)];
  };

  toRadians = function(degrees) {
    return TauDiv360 * degrees;
  };

  Simulator = class Simulator {
    constructor(root = window) {
      this.toggleRunning = this.toggleRunning.bind(this);
      this.root = root;
      ({document: this.document} = this.root);
      ({body: this.body} = this.document);
      // @document
      //   .getElementsByTagName 'title'
      //   [0]
      //   .innerText = title
      this.createElement = (...args) => {
        return this.document.createElement(...args);
      };
      this.canvas = this.createElement('canvas');
      this.canvas.onclick = () => {
        return this.toggleRunning();
      };
      this.ctx = this.canvas.getContext('2d');
      this.body.appendChild(this.canvas);
      this.resize();
      this.root.onresize = () => {
        return this.resize();
      };
    }

    start() {
      this.running = true;
      return this.animate();
    }

    toggleRunning() {
      if (this.running) {
        return this.stop();
      } else {
        return this.start();
      }
    }

    restart() {
      this.stop();
      return this.start();
    }

    stop() {
      var id;
      this.running = false;
      if (this.animationRequest) {
        id = this.animationRequest;
        this.animationRequest = null;
        return this.root.cancelAnimationFrame(id);
      }
    }

    animate() {
      if (!this.running) {
        return;
      }
      return this.animationRequest != null ? this.animationRequest : this.animationRequest = this.root.requestAnimationFrame(() => {
        this.tick++;
        this.animationRequest = null;
        this.iterate();
        this.drawFrame();
        return this.animate();
      });
    }

    resize() {
      ({
        innerWidth: this.width,
        innerHeight: this.height
      } = this.root);
      this.mx = this.width / 2;
      this.my = this.height / 2;
      return Object.assign(this.canvas, {width: this.width, height: this.height});
    }

    clearFrame(color) {
      this.ctx.fillStyle = this.ctx.strokeStyle = color;
      return this.ctx.fillRect(0, 0, this.width, this.height);
    }

    drawCircle(x, y, radius, color) {
      this.ctx.fillStyle = this.ctx.strokeStyle = color;
      this.ctx.beginPath();
      this.ctx.arc(x, y, radius, 0, Tau);
      return this.ctx.fill();
    }

  };

  Worm = class Worm extends Simulator {
    constructor(...args) {
      var ref, x, y;
      super(...args);
      this.length = 64;
      this.vel = 5;
      this.radius = 10;
      this.turnSpeed = (Tau / 360) * 30;
      ({
        mx: x,
        my: y
      } = this);
      this.segments = (function() {
        var results = [];
        for (var j = 1, ref = this.length; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this).map(function() {
        return {x, y};
      });
      this.dir = Math.random() * Tau;
      this.shadeStep = 127 / this.length;
    }

    iterate() {
      var dx, dy, x, y;
      this.dir += (Math.random() - 0.5) * this.turnSpeed;
      if (this.dir > Math.PI) {
        this.dir -= Tau;
      }
      if (this.dir < -Math.PI) {
        this.dir += Tau;
      }
      [dx, dy] = polarToCart(this.vel, this.dir);
      ({x, y} = this.segments[0]);
      x = (x + dx + this.width) % this.width;
      y = (y + dy + this.height) % this.height;
      this.segments.unshift({x, y});
      return this.segments.pop();
    }

    resize() {
      super.resize(...arguments);
      return this.clearFrame('rgb(128,32,0)');
    }

    drawFrame() {
      var c, color, i, j, len, ref, tail, x, y;
      ref = this.segments.slice(0, -2);
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        ({x, y} = ref[i]);
        c = Math.floor((this.length - i) * this.shadeStep + 128);
        this.drawCircle(x, y, this.radius, color = `rgb(${[c, c, c].join(',')}`);
      }
      tail = this.segments.slice(-2);
      ({x, y} = tail[1]);
      this.drawCircle(x, y, this.radius, 'black');
      ({x, y} = tail[0]);
      return this.drawCircle(x, y, this.radius, color);
    }

  };

  Object.assign(window, {Simulator, Worm});

  (window.worm = new Worm()).start();

}).call(this);

//# sourceMappingURL=renderer.js.map
